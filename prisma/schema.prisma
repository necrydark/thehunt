generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String    @unique
  email            String?   @unique
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  description      String?
  role             String    @default("Participant")
  banned           Boolean?  @default(false)
  banReason        String?
  banExpire        DateTime?
  totalPoints      Int       @default(0)
  emailVerified    Boolean   @default(false)
  platform         String?
  vaultHunter      String?
  profileCompleted Boolean   @default(false)

  // Relations
  reviewedSubmissions Submission[]  @relation("AdminReviews")
  submissions         Submission[]
  userItems           UserItem[]
  accounts            Account[]
  sessions            Session[]
  issuedBounties      Bounty[]      @relation("BountyIssuer")
  bountyClaims        BountyClaim[]

  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Submission {
  id              String           @id @default(cuid())
  userId          String
  itemId          String
  twitchClipUrl   String
  status          SubmissionStatus @default(PENDING)
  submittedAt     DateTime         @default(now())
  reviewedBy      String?
  reviewedAt      DateTime?
  rejectionReason String?
  item            Item             @relation(fields: [itemId], references: [id], onDelete: Cascade)
  adminReviewer   User?            @relation("AdminReviews", fields: [reviewedBy], references: [id])
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([itemId])
  @@index([status])
}

model Item {
  id           String       @id @default(cuid())
  name         String       @unique
  points       Int
  mayhem       String
  listGroup    String
  type         String
  manufacturer String?
  source       String
  maps         String
  missionType  String
  rarity       Int
  notes        String?
  imageUrl     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  submissions  Submission[]
  userItems    UserItem[]

  Bounty Bounty[]
}

model UserItem {
  userId     String
  itemId     String
  obtainedAt DateTime @default(now())
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, itemId])
  @@index([userId])
  @@index([itemId])
}

model Bounty {
  id          String       @id @default(cuid())
  title       String
  description String?
  price       Int // Consider Decimal for currency precision
  issuedBy    String
  status      BountyStatus @default(OPEN)
  expiresAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  itemId      String

  // Relations
  item   Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  issuer User          @relation("BountyIssuer", fields: [issuedBy], references: [id])
  claims BountyClaim[]

  @@index([status])
  @@index([issuedBy])
  @@index([expiresAt])
}

model BountyClaim {
  id        String            @id @default(cuid())
  bountyId  String
  claimedBy String
  status    BountyClaimStatus @default(PENDING)
  message   String?
  claimedAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt // Add for tracking status changes
  clipUrl   String

  // Relations  
  bounty  Bounty @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  claimer User   @relation(fields: [claimedBy], references: [id])

  @@unique([bountyId, claimedBy])
  @@index([claimedBy])
  @@index([status])
}

enum BountyClaimStatus {
  PENDING // Waiting for issuer response
  ACCEPTED // Issuer accepted this claim
  REJECTED // Issuer rejected this claim  
  COMPLETED // Transaction completed
}

enum BountyStatus {
  OPEN // Available to claim
  CLAIMED // Someone claimed it  
  COMPLETED // Work done, bounty paid
  CANCELLED // Issuer cancelled
  EXPIRED // Past expiration
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}
