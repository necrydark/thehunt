generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String       @id
  name                String       @unique
  email               String?      @unique
  image               String?
  createdAt           DateTime
  updatedAt           DateTime
  role                String
  banned              Boolean?
  banReason           String?
  banExpire           DateTime?
  totalPoints         Int?         @default(0)
  emailVerified       Boolean?
  reviewedSubmissions Submission[] @relation("AdminReviews")
  submissions         Submission[]
  userItems           UserItem[]
  accounts            Account[]
  sessions            Session[]

  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Submission {
  id              String           @id @default(cuid())
  userId          String
  itemId          String
  twitchClipUrl   String
  status          SubmissionStatus @default(PENDING)
  submittedAt     DateTime         @default(now())
  reviewedBy      String?
  reviewedAt      DateTime?
  rejectionReason String?
  item            Item             @relation(fields: [itemId], references: [id], onDelete: Cascade)
  adminReviewer   User?            @relation("AdminReviews", fields: [reviewedBy], references: [id])
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([itemId])
  @@index([status])
}

model Item {
  id           String       @id @default(cuid())
  name         String       @unique
  points       Int
  mayhem       String
  listGroup    String
  type         String
  manufacturer String?
  source       String
  maps         String
  missionType  String
  rarity       Int
  notes        String?
  imageUrl     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  submissions  Submission[]
  userItems    UserItem[]
}

model UserItem {
  userId     String
  itemId     String
  obtainedAt DateTime @default(now())
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, itemId])
  @@index([userId])
  @@index([itemId])
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}
