// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String       @id
  twitchId            String       @unique
  twitchUsername      String       @unique
  twitchAvatarUrl     String?
  createdAt           DateTime
  updatedAt           DateTime
  role                Role         @default(PARTICIPANT)
  totalPoints         Int          @default(0)
  sessions            Session[]
  accounts            Account[]
  submissions         Submission[] // All submissions made by this user
  userItems           UserItem[] // All items obtained by this user
  reviewedSubmissions Submission[] @relation("AdminReviews")

  @@index([twitchId])
  @@index([totalPoints])
  @@map("user")
}

enum Role {
  PARTICIPANT
  ADMIN
}

model Item {
  id          String   @id @default(cuid()) // Unique ID for the item
  name        String   @unique // Name of the item (e.g., 'Legendary Jakobs Pistol')
  description String? // Description of the item
  points      Int // Points awarded for obtaining this item
  imageUrl    String? // Optional URL to an image of the item
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  submissions Submission[] // Submissions related to this item
  userItems   UserItem[] // Users who have obtained this item
}

model UserItem {
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId     String
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  obtainedAt DateTime @default(now()) // When the item was marked as obtained

  @@id([userId, itemId]) // Composite primary key ensures a user can only obtain an item once
  @@index([userId])
  @@index([itemId])
}

// Submission Model: Represents a user's claim for an item via a Twitch clip.
model Submission {
  id              String           @id @default(cuid()) // Unique ID for the submission
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId          String
  item            Item             @relation(fields: [itemId], references: [id], onDelete: Cascade)
  twitchClipUrl   String // The URL to the Twitch clip
  status          SubmissionStatus @default(PENDING) // Current status of the submission
  submittedAt     DateTime         @default(now())
  reviewedBy      String? // ID of the admin who reviewed it
  adminReviewer   User?            @relation("AdminReviews", fields: [reviewedBy], references: [id])
  reviewedAt      DateTime? // When the submission was reviewed
  rejectionReason String? // Optional reason if the submission was rejected

  @@index([userId])
  @@index([itemId])
  @@index([status]) // Useful for filtering pending submissions
}

// SubmissionStatus Enum: Defines the possible states of a submission.
enum SubmissionStatus {
  PENDING // Awaiting review by an admin
  APPROVED // Approved by an admin, user gets points
  REJECTED // Rejected by an admin
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
